package by.ealipatov.lesson02;

import java.util.Random;

public class Task02 {


    public static void main(String[] args) {

/*
Задание 1. Задать целочисленный массив, состоящий из элементов 0 и 1.
Например: [ 1, 1, 0, 0, 1, 0, 1, 1, 0, 0 ]. С помощью цикла и условия заменить 0 на 1, 1 на 0;
 */
        // Создаем одномерный массив, сразу записываем в него значения и выводим на консоль.
        int[] arr01 = {1, 0, 1, 1, 0, 0, 0, 1, 1, 1};
        System.out.print("Задание 1. Начальный одномерный массив:       ");
        printArr(arr01);
        // Переходим на новую строку
        //С помощью цикла и условия инвертируем значения в массиве. Выводим массив на консоль.
        System.out.print("\nЗадание 1. Инвертированный одномерный массив:");
        for (int i = 0; i < arr01.length; i++) {
            if (arr01[i] == 0) {
                arr01[i] = 1;
            } else arr01[i] = 0;
            System.out.print(" " + arr01[i]);
        }
/*
Задание 2. Задать пустой целочисленный массив размером 8.
С помощью цикла заполнить его значениями 0 3 6 9 12 15 18 21;
 */
        //Создаем пустой массив с размером 8.
        int[] arr02 = new int[8];
        //Заполним массив согласно условию задачи. и выведем значения на консоль.
        arr02[0] = 0;
        for (int i = 1; i < 8; i++) {
            arr02[i] = arr02[i - 1] + 3;
        }
        // Выведем получившийся массив на консоль.
        System.out.print("\n\nЗадание 2. Массив: ");
        printArr(arr02);

    /*
    Задание 3. Задать массив [ 1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1 ] пройти по нему циклом,
    и числа меньшие 6 умножить на 2;
    */
        //Создадим массив целых чисел и заполним его согласно условию, выведем исходный массив на консоль.
        int[] arr03 = {1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1};
        System.out.print("\n\nЗадание 3. Исходный массив:   ");
        printArr(arr03);
        //Все числа в массиве меньше 6 умножим на 2 и выведем получившийся массив на консоль.
        System.out.print("\nЗадание 3. Извененный массив: ");
        for (int i = 0; i < arr03.length; i++) {
            if (arr03[i] < 6)
                arr03[i] = arr03[i] * 2;
            System.out.print(arr03[i] + " ");
        }
    /*
    Задание 4. Создать квадратный двумерный целочисленный массив (количество строк и столбцов одинаковое),
    и с помощью цикла(-ов) заполнить его диагональные элементы единицами;
    */
        // Создадим двумерный целочисленный массив 5х5 и заполним его нулями.;
        int arr04[][] = new int[5][5];
        System.out.println("\n\nЗадание 4. Двумерный массив: ");
        for (int i = 0; i < arr04.length; i++) {
            System.out.println("");
            for (int j = 0; j < arr04[i].length; j++) {
                arr04[i][j] = 0;
                System.out.print(arr04[i][j] + "  ");
            }

        }
        // Заполним первую диагональ массива единицами (1);
        for(int i = 0, j = 0; i < arr04.length; i++, j++) {
            arr04[i][j] = 1;
        }
        //Заполним вторуб диагональ массива единицами
        for(int i = 0, j = arr04[i].length - 1; i < arr04.length; i++, j--) {
            arr04[i][j] = 1;
        }

        //Выведем получившийся массив на консоль.
        System.out.println("\n\nЗадание 4. Двумерный массив с единицами по диагонали: ");
        for(int i = 0; i < arr04.length; i++) {
            System.out.println("");
            for(int j = 0; j < arr04[i].length; j++) {
                System.out.print(arr04[i][j] + "  ");
            }

        }
    /*
    Задание 5. Задать одномерный массив и найти в нем минимальный и максимальный элементы (без помощи интернета);
    */
    //Зададим одномерный целочисленный массив размерностью 100 и заполним его случайными числами от 0 до 100;
    int[] arr05 = new int[10];
    Random random = new Random();
    System.out.println("\n\nЗадание 5. Массив из 10 случайных чисел от 1 до 100: ");
        for(int i = 0; i <10; i++){
            arr05[i] = random.nextInt(100);
            System.out.print(arr05[i] + " ");
        }
    //Найдем минимальное и максимальное число в массиве.
        int min = arr05[0], max = arr05[0];
        for(int i = 0; i <10; i++){
            if(arr05[i] > max) {
            max = arr05[i];
            } else if(arr05[i] < min){
              min = arr05[i];
            }
        }
        System.out.println("\nМинимальное число в массиве: " + min + "\nМаксимальное число в массиве: " + max );

    /*
    Задание 6. Написать метод, в который передается не пустой одномерный целочисленный массив,
    метод должен вернуть true, если в массиве есть место, в котором сумма левой и правой части массива равны.
    Примеры: checkBalance([2, 2, 2, 1, 2, 2, || 10, 1]) → true, checkBalance([1, 1, 1, || 2, 1]) → true,
    граница показана символами ||, эти символы в массив не входят.
     */

    //Создадим массив согласно условию задачи и выведем его на консоль;
        int arr06[] = {2, 2, 2, 1, 2, 2, 10, 1} ;
        System.out.println("\nЗадание 6. Проверяемый массив: ");
        printArr(arr06);

        //Вызовем метод сравнения сумм и выведем результат его работы на консоль.
        System.out.println("\nВ массиве есть совпадения суммы левой и правоцй части? - " + checkBalanseSum(arr06));

    /*
    Задание 7. Написать метод, которому на вход подается одномерный массив и число n
    (может быть положительным, или отрицательным), при этом метод должен сместить все элементы
    массива на n позиций. Элементы смещаются циклично. Для усложнения задачи нельзя пользоваться
    вспомогательными массивами. Примеры: [ 1, 2, 3 ] при n = 1 (на один вправо) -> [ 3, 1, 2 ]; [ 3, 5, 6, 1]
    при n = -2 (на два влево) -> [ 6, 1, 3, 5 ]. При каком n в какую сторону сдвиг можете выбирать сами./
     */
    //Создадим массив из 5 элементов
        int[] arr07 = {1, 2, 3, 4, 5};
    //Вывовем метод смещающий положение элементов в массиве
        System.out.print("\nЗадание 7. Исходный массив: ");
        printArr(arr07);



}
    //Создадим метод печати одномерного массива

    /**
     * Выводит на консоль одномерный целочисленный массив
     * @param arr - выводимый массив, элементы разделены пробелом
     */
    public static void printArr(int arr[]){
        for(int i = 0; i < arr.length; i ++)
            System.out.print(arr[i] + " ");
    }

    //Задание 7. Создадим метод, смещающий положение элементов в массиве на число n
    public static void offset(int arr[], int n){

    }



    //Задание 6. Создадим метод, проверяющий совпадения сумм левой и правоцй части.
    public static boolean checkBalanseSum(int arr[]){
    // Создадим вспомогательные массивы, в которые запишем суммы элементов левой и правой частей.
        int[] arrSumL = new int[arr.length];
        int[] arrSumR = new int[arr.length];
        boolean c = false;
    //Массив сумм левой части
        int summ = 0;
        for (int i = 0; i < arr.length - 1; i++){
            summ = summ + arr[i];
            arrSumL[i] = summ;
        }
    //Массив сумм правой части
        summ = 0;
        for (int i = arr.length - 1; i > 0; i--){
            summ = summ + arr[i];
            arrSumR[i - 1] = summ;
        }
    /*Выведем суммы элелентов левой и правой частей и сравним их. Если есть совпадение, присвоим
    пересенной с значение true, по умолчание с - false;
     */
        for (int i = 0; i < arr.length - 1; i++){
            System.out.print("\nCумма левой части: " + arrSumL[i] + " Сумма правой части: " + arrSumR[i]);
            if(arrSumL[i] == arrSumR[i]){
                c =  true;
            }
        }
    //Возвращаем значение с.
       return c;
    }

}
